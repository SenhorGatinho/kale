; Source generated by DCC6502 version v1.4
; For more info about DCC6502, e-mail veilleux@ameth.org

; FILENAME: ka_audio.bin, File Size: 1659, ORG: $8000
;     -> NES mode enabled
;---------------------------------------------------------------------------

NumTracks    =	$01

temp         =	$13
temp2        =	$14

SongPointer  =	$18
TrackPointer =	$22
RegistersPtr =	$24

StackPos     =	$26

SFXPlaying   =	$0604

RegistersSFX =	$0607
Square1SFX   =	RegistersSFX
Square2SFX   =	RegistersSFX+4
TriangleSFX  =	RegistersSFX+8
NoiseSFX     =	RegistersSFX+12

RegistersMus =	$0617
Square1Mus   =	RegistersMus
Square2Mus   =	RegistersMus+4
TriangleMus  =	RegistersMus+8
NoiseMus     =	RegistersMus+12

RegistersOld =	$0627
Square1Old   =	RegistersOld
Square2Old   =	RegistersOld+4
TriangleOld  =	RegistersOld+8
NoiseOld     =	RegistersOld+12

TrackVoice   =	$0637
Square1Chn   =	$00
Square2Chn   =	$04
TriangleChn  =	$08
NoiseChn     =	$0C

; duration in frames of the current note/rest on this track
; if == $00 then track is not in use
TrackCounter =	$0641

TrackPtrsL   =	$064B
TrackPtrsH   =	$0655

TrackBaseNt  =	$0687

; high nibble = track volume
; low nibble = current note volume
TrackVol     =	$069B

; length of a track's notes in increments of 6 frames
TrackNoteLen =	$06AF

; position of track's sequence/loop stack
TrackStackPos = $06C3

TrackStack    = $06E1

;---------------------------------------------------------------------------
; code begins here
;---------------------------------------------------------------------------

$8000	LDX #$00	
$8002	STX $4011	; [NES] Audio -> DPCM D/A data
$8005	DEX		
$8006	STX $0602	
$8009	STX $0603	
$800C	STX $0781	
$800F	LDX #$0F	
$8011	STX $4015	; [NES] IRQ status / Sound enable
$8014	LDX #$0F	
$8016	LDA #$0E	
$8018	STA $0627,X	
$801B	DEX		
$801C	BPL $8018	
$801E	LDA #$FF	
$8020	STA $0783	
$8023	JSR $8105	
$8026	LDA #$FF	
$8028	TAX		
$8029	BPL $802E	
$802B	JMP $809E	
$802E	LDA SFXPlaying	
$8031	BEQ $8055	
$8033	AND $8AEF,X	
$8036	BEQ $8055	
$8038	LDY #$04	
$803A	LDA $06D7,Y	
$803D	AND $8AEF,X	
$8040	BEQ $804F	
$8042	LDA $06DC,Y	
$8045	CMP $8B47,X	
$8048	BCC $8054	
$804A	LDA #$00	
$804C	STA TrackCounter,Y	
$804F	DEY		
$8050	BPL $803A	
$8052	BMI $8055	
$8054	RTS		
;---------------------------------------------------------------------------

$8055	STX $0782	
$8058	LDA $8AEF,X	
$805B	STA $0605	
$805E	LDA $8B47,X	
$8061	STA $02		
$8063	LDA $8A3F,X	
$8066	STA SongPointer	
$8068	LDA $8A97,X	
$806B	STA $SongPointer+1		
$806D	LDY #$00	
$806F	LDA (SongPointer),Y	
$8071	STA NumTracks		
$8073	LDX #$04	
$8075	LDA TrackCounter,X	
$8078	BNE $808C	
$807A	JSR $80CC	
$807D	PHP		
$807E	LDA $02		
$8080	STA $06DC,X	
$8083	LDA $0605	
$8086	STA $06D7,X	
$8089	PLP		
$808A	BEQ $808F	
$808C	DEX		
$808D	BPL $8075	
$808F	LDA $06D7	
$8092	LDX #$04	
$8094	ORA $06D7,X	
$8097	DEX		
$8098	BNE $8094	
$809A	STA SFXPlaying	
$809D	RTS		
;---------------------------------------------------------------------------

$809E	LDX #$04	
$80A0	LDA #$00	
$80A2	STA TrackCounter,X	
$80A5	STA $06D7,X	
$80A8	LDA #$FF	
$80AA	STA $06DC,X	
$80AD	DEX		
$80AE	BPL $80A0	
$80B0	LDX #$0F	
$80B2	LDA $ChannelInit,X	
$80B5	STA RegistersSFX,X	
$80B8	DEX		
$80B9	BPL $80B2	
$80BB	RTS		
;---------------------------------------------------------------------------

ChannelInit:

; square 1 init
$80BC	.byte $30, $7F, $00, $FF
; square 2 init
$80C0	.byte $30, $7F, $00, $FF
; triangle init
$80C4	.byte $00, $00, $00, $00
; noise init
$80C8	.byte $30, $00, $00, $FF

InitTrack:

; set up default values for track
$80CC	LDA #$27	
$80CE	STA TrackBaseNt,X	
$80D1	LDA #$00	
$80D3	STA $0691,X	
$80D6	STA TrackVol,X	
$80D9	STA $06A5,X	
$80DC	STA TrackNoteLen,X	
$80DF	STA $06B9,X	
$80E2	LDA $8724,X	
$80E5	STA TrackStackPos,X	

; get starting position for track
$80E8	INY		
$80E9	LDA (SongPointer),Y	
$80EB	STA TrackPtrsL,X	
$80EE	INY		
$80EF	LDA (SongPointer),Y	
$80F1	STA TrackPtrsH,X	

; and which channel this track uses
$80F4	INY		
$80F5	LDA (SongPointer),Y	
$80F7	STA TrackVoice,X	

; indicate that something's playing on this track
$80FA	LDA #$01	
$80FC	STA TrackCounter,X	
$80FF	STA $067D,X	

$8102	DEC NumTracks		
$8104	RTS		
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; Music init routine
; A = tune number
;---------------------------------------------------------------------------

MusicInit:

$8105	PHA		

; clear counter for tracks 5-9 (music)

$8106	LDX #$04	
$8108	LDA #$00	
$810A	STA TrackCounter+5,X	
$810D	DEX		
$810E	BPL $8108	

; init register values for all channels

$8110	LDX #$0F	
$8112	LDA ChannelInit,X	
$8115	STA RegistersMus,X	
$8118	DEX		
$8119	BPL $8112

; don't play tunes >= $80
	
$811B	PLA		
$811C	BMI $8152	

$811E	TAX		
$811F	LDA SongTableL,X	; $8991	
$8122	STA SongPointer 	; $18
$8124	LDA SongTableH,X	; $89CB
$8127	STA SongPointer+1	; $19

; do stuff with the MMC3 bank switch registers here

$8129	LDY #$87	
$812B	STY $38		
$812D	LDA SongTableB,X	; $8A05
$8130	STA $0600	
$8133	STA $49		
$8135	STY $8000	
$8138	STA $8001	

; first byte in music data = number of tracks

$813B	LDY #$00	
$813D	LDA (SongPointer),Y	
$813F	STA NumTracks		

; if nothing is playing on this track, then initialize it

$8141	LDX #$09	
$8143	LDA TrackCounter,X	
$8146	BNE $814D	
$8148	JSR InitTrack	
; no more tracks? stop initializing any
$814B	BEQ $8152	
$814D	DEX		
$814E	CPX #$04	
$8150	BNE $8143	
$8152	RTS		
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; Music play routine
;---------------------------------------------------------------------------

MusicPlay:

; synchronize frame counter (5 step)
$8153	LDA #$C0	
$8155	STA $4017	; [NES] Joypad & I/O port for port #2

; for each track...
$8158	LDX #$09	

; if nothing is playing on this track, skip it
$815A	LDA TrackCounter,X	
$815D	BEQ $81A4	

; store pointer to sound register values in RAM ($0607 for SFX tracks, $0617 for music tracks)
$815F	LDA TrackMemTableL,X	; $8710
$8162	STA RegistersPtr		; $24
$8164	LDA TrackMemTableH,X	; $871A
$8167	STA RegistersPtr+1		

; decrease track counter
$8169	DEC TrackCounter,X	
$816C	BNE $8185	

; current note/rest has ended, read the next part of the track
$816E	LDA TrackPtrsL,X	
$8171	STA TrackPointer	; $22	
$8173	LDA TrackPtrsH,X	
$8176	STA TrackPointer+1	; $23	
$8178	JSR TrackPlay	; $824E
$817B	LDA TrackPointer		
$817D	STA TrackPtrsL,X	
$8180	LDA TrackPointer+1		
$8182	STA TrackPtrsH,X	

; a note/rest is still going (or now going) on this track...
$8185	JSR $8524	

; decrease ??? counter
$8188	DEC $065F,X	
$818B	BNE $81A4
	
$818D	LDA $0669,X	
$8190	STA TrackPointer		
$8192	LDA $0673,X	
$8195	STA TrackPointer+1		
$8197	JSR $8541	
$819A	LDA TrackPointer		
$819C	STA $0669,X	
$819F	LDA TrackPointer+1		
$81A1	STA $0673,X	

; done processing this track
$81A4	DEX		
$81A5	BPL $815A	

; check tracks 0-4 (SFX)
$81A7	LDX #$04	
$81A9	LDA TrackCounter,X	
$81AC	BNE $81B8	

; if no SFX is playing on this track, ???
$81AE	LDA #$FF	
$81B0	STA $06DC,X	
$81B3	LDA #$00	
$81B5	STA $06D7,X	
$81B8	DEX		
$81B9	BPL $81A9	
; do something with SFX
$81BB	JSR $808F

$81BE	LDA SFXPlaying	

;---------------------------------------------------------------------------
; Update square 1 registers
;---------------------------------------------------------------------------
	
$81C1	LSR A		
$81C2	PHA		
$81C3	LDX #$00	
$81C5	LDY #$03	
$81C7	PHP		
$81C8	LDA Square1Mus,X	
$81CB	BCC $81D0	
$81CD	LDA Square1SFX,X	
$81D0	CMP Square1Old,X	
$81D3	BEQ $81DB	
$81D5	STA Square1Old,X	
$81D8	STA $4000,X	; [NES] Audio -> Square 1
$81DB	PLP		
$81DC	INX		
$81DD	DEY		
$81DE	BPL $81C7	

;---------------------------------------------------------------------------
; Update square 2 registers
;---------------------------------------------------------------------------

$81E0	PLA		
$81E1	LSR A		
$81E2	PHA		
$81E3	LDX #$00	
$81E5	LDY #$03	
$81E7	PHP		
$81E8	LDA Square2Mus,X	
$81EB	BCC $81F0	
$81ED	LDA Square2SFX,X	
$81F0	CMP Square2Old,X	
$81F3	BEQ $81FB	
$81F5	STA Square2Old,X	
$81F8	STA $4004,X	; [NES] Audio -> Square 2
$81FB	PLP		
$81FC	INX		
$81FD	DEY		
$81FE	BPL $81E7	

;---------------------------------------------------------------------------
; Update triangle registers
;---------------------------------------------------------------------------

$8200	PLA		
$8201	LSR A		
$8202	PHA		
$8203	LDX #$00	
$8205	LDY #$03	
$8207	PHP		
$8208	LDA TriangleMus,X	
$820B	BCC $8210	
$820D	LDA TriangleSFX,X	
$8210	CMP TriangleOld,X	
$8213	BEQ $821B	
$8215	STA TriangleOld,X	
$8218	STA $4008,X	; [NES] Audio -> Triangle
$821B	PLP		
$821C	INX		
$821D	DEY		
$821E	BPL $8207	

;---------------------------------------------------------------------------
; Update noise registers
;---------------------------------------------------------------------------

$8220	PLA		
$8221	LSR A		
$8222	LDX #$03	
$8224	PHP		
$8225	LDA NoiseMus,X	
$8228	BCC $822D	
$822A	LDA NoiseSFX,X	
$822D	CMP NoiseOld,X	
$8230	BEQ $8238	
$8232	STA NoiseOld,X	
$8235	STA $400C,X	; [NES] Audio -> Noise control reg
$8238	PLP		
$8239	DEX		
$823A	BPL $8224	

;---------------------------------------------------------------------------
; Reload DPCM counter if necessary
;---------------------------------------------------------------------------

$823C	LDA $4015	; [NES] IRQ status / Sound enable
$823F	AND #$10	
$8241	BNE $8248	
$8243	LDA #$7F	
$8245	STA $4011	; [NES] Audio -> DPCM D/A data
$8248	RTS		
;---------------------------------------------------------------------------

$8249	.byte $08

; used on noise tracks to distinguish sample notes from actual noise notes
; and on square/triangle tracks to ???
SampleBit:
$824A	.byte $10 

TrackPlayContinue:

$824B	JSR GetNextTrackByte

TrackPlay: 

$824E	LDY #$00	
$8250	LDA (TrackPointer),Y	

; bytes $E0 and up = track commands

$8252	AND #$E0	
$8254	CMP #$E0	
$8256	BNE $825B	
$8258	JMP DoTrackCommand	

; otherwise, if this track is on the noise channel...

$825B	LDA TrackVoice,X	
$825E	CMP #NoiseChn	
$8260	BNE DoNormalVoice

; if bit 4 is set, this is a DPCM note

$8262	LDA (TrackPointer),Y	
$8264	BIT SampleBit	
$8267	BNE DoSample	

; if low nibble = $F, do something else

$8269	AND #$0F	
$826B	CMP #$0F	
$826D	BEQ $82A1	

; otherwise, set the noise period/loop ($400E)

$826F	LDY #$0E	
$8271	STA (RegistersPtr),Y	
$8273	JMP $82B8	

; DPCM sample notes
; low nibble = sample frequency

DoSample:

$8276	AND #$0F	
$8278	STA $4010	; [NES] Audio -> DPCM control

; retrigger sample
$827B	LDA #$0F	
$827D	STA $4015	; [NES] IRQ status / Sound enable
$8280	LDA #$1F	
$8282	STA $4015	; [NES] IRQ status / Sound enable
$8285	JMP $82B8	

; Square and triangle notes

DoNormalVoice:

$8288	LDA (TrackPointer),Y	
$828A	AND #$1F	
$828C	CMP #$10	
$828E	BEQ $82A1	
$8290	BIT $824A	
$8293	BEQ $8297	
$8295	ORA #$E0	
$8297	CLC		
$8298	ADC TrackBaseNt,X	
$829B	JSR $84E9	
$829E	JMP $82B8

	
$82A1	JSR $8306	
$82A4	PHA		
$82A5	LDA $067D,X	
$82A8	BEQ $82AF	
$82AA	LDA #$01	
$82AC	STA $067D,X	
$82AF	PLA		
$82B0	BEQ $82B5	
$82B2	JMP GetNextTrackByte	
$82B5	JMP TrackPlayContinue	



$82B8	JSR $8306	
$82BB	PHA		
$82BC	TAY		
$82BD	LDA #$FF	
$82BF	STA $067D,X	
$82C2	LDA $0691,X	
$82C5	BEQ $82E0	
$82C7	STA temp		
$82C9	TXA		
$82CA	PHA		
$82CB	LDA #$00	
$82CD	TAX		
$82CE	CLC		
$82CF	ADC temp		
$82D1	BCC $82D4	
$82D3	INX		
$82D4	DEY		
$82D5	BNE $82CE	
$82D7	STX temp		
$82D9	PLA		
$82DA	TAX		
$82DB	LDA temp		
$82DD	STA $067D,X	
$82E0	JSR $82E6	
$82E3	JMP $82AF	
$82E6	LDA $06A5,X	
$82E9	BMI $8305	

$82EB	ASL A		
$82EC	ASL A		
$82ED	TAY		
$82EE	LDA $88B1,Y	
$82F1	STA $0669,X	
$82F4	LDA $88B2,Y	
$82F7	STA $0673,X	
$82FA	LDA $872E,X	
$82FD	STA $06CD,X	
$8300	LDA #$01	
$8302	STA $065F,X	
$8305	RTS		
;---------------------------------------------------------------------------

$8306	LDY #$00	
$8308	LDA (TrackPointer),Y	
$830A	AND #$E0	
$830C	CMP #$C0	
$830E	BNE $8316	
$8310	JSR GetNextTrackByte	
$8313	JMP $8322	
$8316	LSR A		
$8317	LSR A		
$8318	LSR A		
$8319	LSR A		
$831A	LSR A		
$831B	ADC TrackNoteLen,X	
$831E	TAY		
$831F	LDA $8955,Y	
$8322	STA TrackCounter,X	
$8325	RTS		
;---------------------------------------------------------------------------

DoTrackCommand:

;---------------------------------------------------------------------------
; Track command $F0 - Set track volume (upper nibble of TrackVol,X)
; 1 byte: new track volume (00-0F)
;---------------------------------------------------------------------------

$8326	LDA (TrackPointer),Y	
$8328	CMP #$F0	
$832A	BNE TrackCommandF1	
$832C	JSR GetNextTrackByte	

SetTrackVolume:

$832F	ASL A		
$8330	ASL A		
$8331	ASL A		
$8332	ASL A		
$8333	STA temp		

; set upper nibble of TrackVol to lower nibble of argument
$8335	LDA TrackVol,X	
$8338	AND #$0F	
$833A	ORA temp		
$833C	STA TrackVol,X	
$833F	JSR $85F3	
$8342	JMP TrackPlayContinue	

;---------------------------------------------------------------------------
; Track command $F1 - Increase/decrease track volume
; 1 byte: volume increase (00-0F) or decrease (80-8F)
;---------------------------------------------------------------------------
TrackCommandF1:

$8345	CMP #$F1	
$8347	BNE TrackCommandF2	

$8349	JSR GetNextTrackByte	
$834C	STA temp		
$834E	LDA TrackVol,X	
$8351	LSR A		
$8352	LSR A		
$8353	LSR A		
$8354	LSR A		
$8355	CLC		
$8356	ADC temp		

; adding or subtracting?
$8358	BIT temp		
$835A	BMI $8362	

; adding = clamp volume at $0F
$835C	BCC $8366	
$835E	LDA #$0F	
$8360	BNE $8366	

; subtracting = clamp volume at $00
$8362	BCS $8366	
$8364	LDA #$00	

$8366	JMP SetTrackVolume	

;---------------------------------------------------------------------------
; Track command $F2 - Set track quantization
; 1 byte: length of notes in 6-frame increments ($01 = 6 frames, etc)
;---------------------------------------------------------------------------
TrackCommandF2:

$8369	CMP #$F2	
$836B	BNE TrackCommandF3	

$836D	JSR GetNextTrackByte	
$8370	ASL A		
$8371	STA temp2		
$8373	ASL A		
$8374	ADC temp2		
$8376	STA TrackNoteLen,X	
$8379	JMP TrackPlayContinue	

;---------------------------------------------------------------------------
; Track command $F3 - Set track delay
; 1 byte: frames to delay until next note
; Ends playback on the track for this frame.
;---------------------------------------------------------------------------
TrackCommandF3:

$837C	CMP #$F3	
$837E	BNE TrackCommandF4	

$8380	JSR GetNextTrackByte	
$8383	STA TrackCounter,X	

; ???
$8386	LDA #$FF	
$8388	STA $067D,X	

; increase track pointer but don't continue playing it for now
$838B	JMP GetNextTrackByte	

;---------------------------------------------------------------------------
; Track command $F4
;---------------------------------------------------------------------------
TrackCommandF4:

$838E	CMP #$F4	
$8390	BNE TrackCommandF5	
$8392	JSR GetNextTrackByte	
$8395	STA $0691,X	
$8398	JMP TrackPlayContinue

;---------------------------------------------------------------------------
; Track command $F5 - Transpose track
; 1 byte: track base note (default $27)
;---------------------------------------------------------------------------
TrackCommandF5:

$839B	CMP #$F5	
$839D	BNE TrackCommandF6	

$839F	JSR GetNextTrackByte	
$83A2	STA $0687,X	
$83A5	JMP TrackPlayContinue	

;---------------------------------------------------------------------------
; Track command $F6
;---------------------------------------------------------------------------
TrackCommandF6:

$83A8	CMP #$F6	
$83AA	BNE TrackCommandF7	

$83AC	JSR GetNextTrackByte	
$83AF	STA $06A5,X	
$83B2	BPL $83B7	
$83B4	JSR $82EB	
$83B7	JMP TrackPlayContinue

;---------------------------------------------------------------------------
; Track command $F7
;---------------------------------------------------------------------------
TrackCommandF7:
	
$83BA	CMP #$F7	
$83BC	BNE TrackCommandE0	
$83BE	JSR GetNextTrackByte	
$83C1	STA $06B9,X	
$83C4	JMP TrackPlayContinue	

;---------------------------------------------------------------------------
; Track command $E0 - Select sample
; 1 byte: DPCM sample address ($4012)
; 1 byte: DPCM sample length  ($4013)
;---------------------------------------------------------------------------
TrackCommandE0:

$83C7	CMP #$E0	
$83C9	BNE TrackCommandE2	
$83CB	JSR GetNextTrackByte	
$83CE	STA $4012	; [NES] Audio -> DPCM address
$83D1	JSR GetNextTrackByte	
$83D4	STA $4013	; [NES] Audio -> DPCM data length
$83D7	JMP TrackPlayContinue	

;---------------------------------------------------------------------------
; Track command $E2
;---------------------------------------------------------------------------
TrackCommandE2:

$83DA	CMP #$E2	
$83DC	BNE TrackCommandE3	
$83DE	JSR GetNextTrackByte	
$83E1	PHA		
$83E2	JSR GetNextTrackByte	
$83E5	LDY TrackVoice,X	
$83E8	INY		
$83E9	INY		
$83EA	INY		
$83EB	AND #$0F	
$83ED	STA temp		
$83EF	LDA $0627,Y	
$83F2	AND #$10	
$83F4	EOR #$10	
$83F6	ORA temp		
$83F8	STA (RegistersPtr),Y	
$83FA	PLA		
$83FB	DEY		
$83FC	STA (RegistersPtr),Y	
$83FE	JSR $82E6	
$8401	JMP TrackPlayContinue	

;---------------------------------------------------------------------------
; Track command $E3 - Increase/decrease channel timer
; 1 byte: increase amount
;---------------------------------------------------------------------------
TrackCommandE3:

$8404	CMP #$E3	
$8406	BNE TrackCommandE1	

$8408	JSR GetNextTrackByte	
$840B	BPL $840E	
; if negative, decrease Y (00 -> FF) so the high byte of the timer
; (and the length counter) gets decreased too
$840D	DEY		
$840E	JSR ChangeChannelTimer	
$8411	JMP TrackPlayContinue

;---------------------------------------------------------------------------
; Track command $E1 - write to $0601
; 1 byte: value to write
; this address is never read by the entire game?
;---------------------------------------------------------------------------
TrackCommandE1:
	
$8414	CMP #$E1	
$8416	BNE TrackCommandFF	

$8418	JSR GetNextTrackByte	
$841B	STA $0601	
$841E	JMP TrackPlayContinue

;---------------------------------------------------------------------------
; Track command $FF - End of track
;---------------------------------------------------------------------------
TrackCommandFF:
	
$8421	CMP #$FF	
$8423	BNE MoreTrackCommands	

$8425	LDA #$00	
$8427	STA TrackCounter,X	
$842A	STA $065F,X	
$842D	JSR $85E7	
$8430	RTS		
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; Additional track commands.
; These are mostly position-based commands which use a stack to keep track
; of position in the current track.
;---------------------------------------------------------------------------
MoreTrackCommands:

; get the sequence stack position for this track
$8431	LDA TrackStackPos,X	
$8434	STA StackPos		
$8436	JSR DoOtherTrackCommand	
$8439	LDA StackPos		
$843B	STA TrackStackPos,X	
$843E	JMP TrackPlay

DoOtherTrackCommand:

;---------------------------------------------------------------------------
; Track command $F8 - set track pointer
; 2 bytes: pointer to new data for this track
;---------------------------------------------------------------------------

$8441	LDA (TrackPointer),Y	
$8443	CMP #$F8	
$8445	BNE TrackCommandFA	

$8447	INY		
$8448	LDA (TrackPointer),Y	
$844A	PHA		
$844B	INY		
$844C	LDA (TrackPointer),Y	
$844E	STA TrackPointer+1		
$8450	PLA		
$8451	STA TrackPointer		
$8453	RTS		
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; Track command $FA - play sequence
; 2 bytes: pointer to sequence
; this is like calling a subroutine, but for music.
; they can be nested, too (be careful with the stack size!)
;---------------------------------------------------------------------------
TrackCommandFA:

$8454	CMP #$FA	
$8456	BNE TrackCommandFB	

$8458	JSR GetNextTrackByte	
$845B	PHA		
$845C	JSR GetNextTrackByte	
$845F	PHA		
$8460	JSR GetNextTrackByte	

; push the address to the next byte in the track (after this command)
; onto the track's stack
$8463	LDY StackPos		
$8465	LDA TrackPointer+1		
$8467	DEY		
$8468	STA TrackStack,Y	
$846B	LDA TrackPointer		
$846D	DEY		
$846E	STA TrackStack,Y	
$8471	STY StackPos	

; and set the new track position to the given pointer	
$8473	PLA		
$8474	STA TrackPointer+1		
$8476	PLA		
$8477	STA TrackPointer		
$8479	RTS		
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; Track command $FB - end sequence
; return from the current sequence to the track/sequence that started it.
;---------------------------------------------------------------------------
TrackCommandFB:

$847A	CMP #$FB	
$847C	BNE TrackCommandFC	

$847E	LDY StackPos		
; pull the new track position off of the stack
$8480	LDA TrackStack,Y	
$8483	STA TrackPointer		
$8485	INY		
$8486	LDA TrackStack,Y	
$8489	STA TrackPointer+1		
$848B	INY		
$848C	STY StackPos		
$848E	RTS		
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; Track command $FC - loop start
; 1 byte: loop count
;---------------------------------------------------------------------------
TrackCommandFC:

$848F	CMP #$FC	
$8491	BNE TrackCommandFD	

$8493	JSR GetNextTrackByte	
$8496	PHA		
$8497	JSR GetNextTrackByte	

; push the next byte in the track (after this command)
; onto the track's stack. this is where the loop will return to
$849A	LDY StackPos		
$849C	LDA TrackPointer+1		
$849E	DEY		
$849F	STA TrackStack,Y	
$84A2	LDA TrackPointer		
$84A4	DEY		
$84A5	STA TrackStack,Y	

; and push the loop count too
$84A8	PLA		
$84A9	DEY		
$84AA	STA TrackStack,Y	
$84AD	STY StackPos		
$84AF	RTS		
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; Track command $FD - loop end
;---------------------------------------------------------------------------
TrackCommandFD:

$84B0	CMP #$FD	
$84B2	BNE TrackCommandFE	

; decrease the loop counter
$84B4	LDY StackPos		
$84B6	LDA TrackStack,Y	
$84B9	SEC		
$84BA	SBC #$01	
$84BC	STA TrackStack,Y	
; if it's 0, the loop is over
$84BF	BEQ $84CC	

; otherwise, go back to the beginning of the loop
$84C1	LDA $06E2,Y	
$84C4	STA TrackPointer		
$84C6	LDA $06E3,Y	
$84C9	STA TrackPointer+1		
$84CB	RTS		
;---------------------------------------------------------------------------

; pop the loop position and counter off of the stack and resume playback
$84CC	INC StackPos		
$84CE	INC StackPos		
$84D0	INC StackPos		
$84D2	JMP GetNextTrackByte	

;---------------------------------------------------------------------------
; Track command $FE - skip one byte
;---------------------------------------------------------------------------
TrackCommandFE:

$84D5	CMP #$FE	
$84D7	BNE EndOtherCommands	

$84D9	JSR GetNextTrackByte	
$84DC	JMP GetNextTrackByte

EndOtherCommands:
	
$84DF	RTS		
;---------------------------------------------------------------------------

GetNextTrackByte:

$84E0	INC TrackPointer		
$84E2	BNE $84E6	
$84E4	INC TrackPointer+1		
$84E6	LDA (TrackPointer),Y	
$84E8	RTS		
;---------------------------------------------------------------------------

$84E9	PHA		
$84EA	LDA $06B9,X	
$84ED	ASL A		
$84EE	TAY		
$84EF	LDA $8738,Y	
$84F2	STA $1C		
$84F4	LDA $8739,Y	
$84F7	STA $1D		
$84F9	PLA		
$84FA	ASL A		
$84FB	TAY		
$84FC	LDA ($1C),Y	
$84FE	STA temp		
$8500	INY		
$8501	LDA ($1C),Y	
$8503	LDY TrackVoice,X	
$8506	INY		
$8507	INY		
$8508	STA (RegistersPtr),Y	
$850A	INY		
$850B	LDA $0627,Y	
$850E	AND #$10	
$8510	EOR #$10	
$8512	ORA $851A,X	
$8515	ORA temp		
$8517	STA (RegistersPtr),Y	
$8519	RTS		
;---------------------------------------------------------------------------

$851A	.byte $00, $00, $00, $00, $00
$851F	.byte $20, $20, $20, $20, $20

$8524	LDA $067D,X
$8527	BEQ $853D
$8529	CMP #$FF	
$852B	BEQ $853D	
$852D	DEC $067D,X	
$8530	BNE $853D	
$8532	LDA $06A5,X	
$8535	ASL A		
$8536	ASL A		
$8537	TAY		
$8538	INY		
$8539	INY		
$853A	JMP $82EE	
$853D	RTS		
;---------------------------------------------------------------------------

$853E	JSR GetNextTrackByte	
$8541	LDY #$00	
$8543	LDA (TrackPointer),Y	
$8545	AND #$E0	
$8547	BNE $8553	
$8549	LDA (TrackPointer),Y	
$854B	AND #$1F	
$854D	STA $065F,X	
$8550	JMP GetNextTrackByte	
$8553	CMP #$20	
$8555	BNE $856D	
$8557	JSR $8648	
$855A	JSR ChangeChannelTimer	
$855D	LDY #$00	
$855F	LDA (TrackPointer),Y	
$8561	AND #$10	
$8563	BEQ $853E	
$8565	LDA #$01	
$8567	STA $065F,X	
$856A	JMP GetNextTrackByte	
$856D	CMP #$40	
$856F	BNE $8578	
$8571	LDA (TrackPointer),Y	
$8573	AND #$0F	
$8575	JMP $8593	
$8578	CMP #$60	
$857A	BNE $8599	
$857C	JSR $8648	
$857F	CLC		
$8580	STA temp		
$8582	LDA TrackVol,X	
$8585	AND #$0F	
$8587	ADC temp		
$8589	BPL $858D	
$858B	LDA #$00	
$858D	CMP #$10	
$858F	BCC $8593	
$8591	LDA #$0F	
$8593	JSR $85E7	
$8596	JMP $855D	
$8599	CMP #$80	
$859B	BNE $85B6	
$859D	LDA (TrackPointer),Y	
$859F	AND #$0F	
$85A1	LDY TrackVoice,X	
$85A4	ROR A		
$85A5	ROR A		
$85A6	ROR A		
$85A7	AND #$C0	
$85A9	STA temp		
$85AB	LDA (RegistersPtr),Y	
$85AD	AND #$3F	
$85AF	ORA temp		
$85B1	STA (RegistersPtr),Y	
$85B3	JMP $855D	
$85B6	CMP #$E0	
$85B8	BNE $85E6	
$85BA	LDA (TrackPointer),Y	
$85BC	CMP #$F0	
$85BE	BNE $85CC	
$85C0	JSR GetNextTrackByte	
$85C3	LDY TrackVoice,X	
$85C6	INY		
$85C7	STA (RegistersPtr),Y	
$85C9	JMP $853E	
$85CC	CMP #$FF	
$85CE	BNE $85D6	
$85D0	LDA #$00	
$85D2	STA $065F,X	
$85D5	RTS		
;---------------------------------------------------------------------------

$85D6	LDA $06CD,X	
$85D9	STA StackPos		
$85DB	JSR $8441	
$85DE	LDA StackPos		
$85E0	STA $06CD,X	
$85E3	JMP $8541	
$85E6	RTS		
;---------------------------------------------------------------------------

$85E7	STA temp		
$85E9	LDA TrackVol,X	
$85EC	AND #$F0	
$85EE	ORA temp		
$85F0	STA TrackVol,X	
$85F3	LDA #$FF	
$85F5	SEC		
$85F6	SBC TrackVol,X	
$85F9	LSR A		
$85FA	LSR A		
$85FB	LSR A		
$85FC	LSR A		
$85FD	STA temp		
$85FF	LDA TrackVol,X	
$8602	AND #$0F	
$8604	SEC		
$8605	SBC temp		
$8607	BPL $860B	
$8609	LDA #$00	
$860B	STA temp		
$860D	LDY #$00	
$860F	CPX #$05	
$8611	BCC $8614	
$8613	INY		
$8614	LDA #$FF	
$8616	SEC		
$8617	SBC $0602,Y	
$861A	LSR A		
$861B	LSR A		
$861C	LSR A		
$861D	LSR A		
$861E	EOR #$FF	
$8620	SEC		
$8621	ADC temp		
$8623	BPL $8627	
$8625	LDA #$00	
$8627	STA temp		
$8629	LDY TrackVoice,X	
$862C	CPY #$08	
$862E	BEQ $863B	
$8630	LDA (RegistersPtr),Y	
$8632	AND #$C0	
$8634	ORA #$30	
$8636	ORA temp		
$8638	STA (RegistersPtr),Y	
$863A	RTS		
;---------------------------------------------------------------------------

$863B	LDA temp		
$863D	CMP #$04	
$863F	LDA #$00	
$8641	BCC $8645	
$8643	LDA #$FF	
$8645	STA (RegistersPtr),Y	
$8647	RTS		
;---------------------------------------------------------------------------

$8648	LDY #$00	
$864A	LDA (TrackPointer),Y	
$864C	AND #$0F	
$864E	BIT $8249	
$8651	BEQ $8656	
$8653	ORA #$F0	
$8655	DEY		
$8656	RTS		
;---------------------------------------------------------------------------

$8657	LDY #$00	
$8659	LDA (TrackPointer),Y	
$865B	AND #$1F	
$865D	BIT $824A	
$8660	BEQ $8665	
$8662	ORA #$E0	
$8664	DEY		
$8665	RTS		
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; add a 16-bit signed value to the timer/length counter for the channel
; used by this track ($4002, $4006, $400A, and maybe $400E)
; A = lower byte, Y = upper byte
;---------------------------------------------------------------------------

ChangeChannelTimer:

$8666	STY temp		
$8668	LDY TrackVoice,X	
$866B	CLC		
$866C	INY		
$866D	INY		

; add A to channel's timer / length counter ($4002-4003)
$866E	ADC (RegistersPtr),Y	
$8670	STA (RegistersPtr),Y	
$8672	INY		
$8673	LDA temp		
$8675	ADC (RegistersPtr),Y	
$8677	STA (RegistersPtr),Y	
$8679	RTS		
;---------------------------------------------------------------------------

